#!/usr/bin/env python3
"""
Handler for sending a test table-formatted message.
"""
import logging
import time
import json
from typing import Any, Dict

logger = logging.getLogger(__name__)

class TableTestHandler:
    """
    A simple handler to send a predefined table message for testing purposes.
    """
    def __init__(self):
        self.name = "tabletest"
        self.description = "Sends a test message with a formatted table."
        self.usage = "/tabletest"
        self.aliases = ["tt"]
        self.enabled = True

    def _create_table_payload(self) -> Dict[str, Any]:
        return {
            "msg_type": "interactive",
            "card": {
                "config": {
                    "wide_screen_mode": True,
                    "enable_forward": True
                },
                "header": {
                    "title": {
                        "tag": "plain_text",
                        "content": "Wallet Balance Report (Test)"
                    },
                    "template": "blue"
                },
                "elements": [
                    {
                        "tag": "markdown",
                        "content": "**This is a test report generated by the /tabletest command.**"
                    },
                    {
                        "tag": "column_set",
                        "flex_mode": "none",
                        "background_style": "default",
                        "columns": [
                            {
                                "tag": "column",
                                "width": "weighted",
                                "weight": 1,
                                "elements": [{"tag": "markdown", "content": "**Group**\nTrading\nTreasury\nOperations"}]
                            },
                            {
                                "tag": "column",
                                "width": "weighted",
                                "weight": 1,
                                "elements": [{"tag": "markdown", "content": "**Wallet Name**\nBinance-Hot-1\nCold-Storage-A\nOKX-Ops"}]
                            },
                            {
                                "tag": "column",
                                "width": "weighted",
                                "weight": 1,
                                "elements": [{"tag": "markdown", "content": "**Amount (USDT)**\n1,234,567.89\n9,876,543.21\n500,000.00"}]
                            }
                        ]
                    },
                    {
                        "tag": "hr"
                    },
                    {
                        "tag": "note",
                        "elements": [
                            {
                                "tag": "plain_text",
                                "content": "Last updated: " + time.strftime("%Y-%m-%d %H:%M:%S")
                            }
                        ]
                    }
                ]
            }
        }

    async def handle(self, context: Any) -> bool:
        """
        Handles the /tabletest command.
        """
        logger.info(f"Executing /tabletest command for user {context.sender_id}")
        try:
            # Create the table payload
            payload = self._create_table_payload()
            card_dict = payload["card"]

            # FIX: The error "unexpected keyword argument 'content'" means the
            # send_command_response method does not use a 'content' keyword.
            # We will pass the card dictionary as a positional argument.
            await context.topic_manager.send_command_response(
                card_dict,
                msg_type="interactive"
            )

            logger.info("✅ Successfully sent test table message.")
            return True
        except Exception as e:
            logger.error(f"❌ Error in TableTestHandler: {e}")
            # Fallback to send a plain text error message if sending the card fails.
            error_text = f"Error: Could not send table message. {e}"
            # For the error message, we assume the method expects a positional argument too.
            await context.topic_manager.send_command_response(error_text, msg_type="text")
            return False